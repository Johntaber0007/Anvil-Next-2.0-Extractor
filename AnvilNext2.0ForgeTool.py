import tkinter as tk
from tkinter import filedialog, messagebox
import struct
import os
import io
from PIL import Image, ImageTk
import base64

def extract_forge_file(forge_path, output_folder):
    try:
        with open(forge_path, "rb") as f:
            header_position = f.read().find(b"scimitar")
            if header_position == -1:
                raise ValueError("scimitar header not found in the file.")

            f.seek(header_position + 8)
            _unknown_byte = f.read(1)
            version = struct.unpack("<L", f.read(4))[0]
            offset_file_data_header = struct.unpack("<Q", f.read(8))[0]

            f.seek(offset_file_data_header)
            total_file_count = struct.unpack("<L", f.read(4))[0]
            f.read(24)
            _maximum_number_files_for_this_index = struct.unpack("<L", f.read(4))[0]
            f.read(4)
            offset_file_data = struct.unpack("<L", f.read(4))[0]

            f.seek(offset_file_data)
            index_count = struct.unpack("<L", f.read(4))[0]
            f.read(4) 
            offset_index_table = struct.unpack("<Q", f.read(8))[0]

            f.seek(offset_index_table)
            for i in range(index_count):
                try:
                    offset_raw_data_table = struct.unpack("<Q", f.read(8))[0]
                    _file_data_id = struct.unpack("<Q", f.read(8))[0]
                    raw_data_size = struct.unpack("<L", f.read(4))[0]

                    file_name = f"{i}.data"
                    output_path = os.path.join(output_folder, file_name)

                    current_position = f.tell()
                    f.seek(offset_raw_data_table)
                    file_data = f.read(raw_data_size)
                    with open(output_path, "wb") as out_f:
                        out_f.write(file_data)
                    f.seek(current_position)
                except (struct.error, OSError) as e:
                    messagebox.showerror("Error", f"An error occurred while extracting file {i}: {e}")

    except (FileNotFoundError, ValueError, struct.error, OSError) as e:
        messagebox.showerror("Error", f"An error occurred during extraction: {e}")
    else:
        messagebox.showinfo("Success", "Files extracted successfully!")

def repack_forge_file(forge_path, import_folder):
    try:
        with open(forge_path, "r+b") as f:
            header_position = f.read().find(b"scimitar")
            if header_position == -1:
                raise ValueError("scimitar header not found in the file.")

            f.seek(header_position + 8)
            _unknown_byte = f.read(1)
            version = struct.unpack("<L", f.read(4))[0]
            offset_file_data_header = struct.unpack("<Q", f.read(8))[0]

            f.seek(offset_file_data_header)
            total_file_count = struct.unpack("<L", f.read(4))[0]
            f.read(24)
            _maximum_number_files_for_this_index = struct.unpack("<L", f.read(4))[0]
            f.read(4)
            offset_file_data = struct.unpack("<L", f.read(4))[0]

            f.seek(offset_file_data)
            index_count = struct.unpack("<L", f.read(4))[0]
            f.read(4)
            offset_index_table = struct.unpack("<Q", f.read(8))[0]

            f.seek(offset_index_table)
            index_entries = []
            for i in range(index_count):
                offset_raw_data_table = struct.unpack("<Q", f.read(8))[0]
                _file_data_id = struct.unpack("<Q", f.read(8))[0]
                raw_data_size = struct.unpack("<L", f.read(4))[0]
                index_entries.append((offset_raw_data_table, _file_data_id, raw_data_size))

            current_offset = f.tell()
            for i in range(index_count):
                offset_raw_data_table, _file_data_id, raw_data_size = index_entries[i]
                file_name = f"{i}.data"
                input_path = os.path.join(import_folder, file_name)
                if os.path.exists(input_path):
                    with open(input_path, "rb") as in_f:
                        file_data = in_f.read()
                    new_data_size = len(file_data)
                    if new_data_size != raw_data_size:
                        for j in range(i + 1, index_count):
                            next_offset_raw_data_table, next_file_data_id, next_raw_data_size = index_entries[j]
                            next_offset_raw_data_table += (new_data_size - raw_data_size)
                            index_entries[j] = (next_offset_raw_data_table, next_file_data_id, next_raw_data_size)
                        index_entries[i] = (offset_raw_data_table, _file_data_id, new_data_size)
                        f.seek(offset_index_table + i * 20 + 16)
                        f.write(struct.pack("<L", new_data_size))
                else:
                    file_data = b'\x00' * raw_data_size

                f.seek(offset_raw_data_table)
                f.write(file_data)

            f.seek(offset_index_table)
            for offset_raw_data_table, _file_data_id, raw_data_size in index_entries:
                f.write(struct.pack("<Q", offset_raw_data_table))
                f.write(struct.pack("<Q", _file_data_id))
                f.write(struct.pack("<L", raw_data_size))

    except (FileNotFoundError, ValueError, struct.error, OSError) as e:
        messagebox.showerror("Error", f"An error occurred during repacking: {e}")
    else:
        messagebox.showinfo("Success", "Files repacked successfully!")


def browse_forge_file():
    filepath = filedialog.askopenfilename(
        title="Select Forge File",
        filetypes=(("Forge files", "*.forge"), ("all files", "*.*")),
    )
    forge_entry.delete(0, tk.END)
    forge_entry.insert(0, filepath) 

def start_extraction():
    forge_file = forge_entry.get()
    output_folder = filedialog.askdirectory(
        title="Select Output Folder"
    )
    if output_folder:
        extract_forge_file(forge_file, output_folder)

def start_import():
    forge_file = forge_entry.get()
    import_folder = filedialog.askdirectory(
        title="Select Import Folder"
    )
    if import_folder:
        repack_forge_file(forge_file, import_folder)

window = tk.Tk()
window.title("AnvilNext2.0ForgeTool")
window.geometry("500x200")
window.resizable(False, False)
window.configure(bg="#f0f0f0")

icon_base64 = ""

icon_data = base64.b64decode(icon_base64)
icon_image = Image.open(io.BytesIO(icon_data))

photo = ImageTk.PhotoImage(icon_image)

window.iconphoto(True, photo)

forge_label = tk.Label(window, text="Forge File:", bg="#f0f0f0")
forge_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")
forge_entry = tk.Entry(window, width=50)
forge_entry.grid(row=0, column=1, padx=10, pady=10)
browse_forge_button = tk.Button(window, text="Browse", command=browse_forge_file, bg="#4CAF50", fg="white")
browse_forge_button.grid(row=0, column=2, padx=10, pady=10)

extract_button = tk.Button(window, text="Extract", command=start_extraction, bg="#f44336", fg="white")
extract_button.grid(row=1, column=1, padx=10, pady=10)

import_button = tk.Button(window, text="Import", command=start_import, bg="#2196F3", fg="white")
import_button.grid(row=2, column=1, padx=10, pady=20)

window.mainloop()
